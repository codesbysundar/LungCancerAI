import os
import cv2
import torch
import numpy as np
import torch.nn as nn
from torchvision import models, transforms
from torch.utils.data import Dataset, DataLoader

# üîß Custom Dataset for CT Slices
class LungCTDataset(Dataset):
    def __init__(self, img_paths, labels, transform=None):
        self.img_paths = img_paths
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path = self.img_paths[idx]
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        if img is None:
            raise FileNotFoundError(f"Image at path '{img_path}' not found or unreadable.")
        img = cv2.resize(img, (224, 224))
        img = np.stack([img]*3, axis=-1)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        if self.transform:
            img = self.transform(img)
        label = torch.tensor(self.labels[idx], dtype=torch.long)
        return img, label



# üîÑ Data Augmentation & Normalization
transform_train = transforms.Compose([
    transforms.ToPILImage(),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5]*3, std=[0.5]*3)
])

transform_eval = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5]*3, std=[0.5]*3)
])

# üìÇ Example Training Data (replace with real paths)
img_paths = ["img8.png", "img2.png", "img3.png","img4.png","img5.png", "img6.png", "img9.png", "img10.png", "img11.png", "img17.png", "img21.png"]
labels = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # 0 = Benign, 1 = Malignant

dataset = LungCTDataset(img_paths, labels, transform=transform_train)
train_loader = DataLoader(dataset, batch_size=8, shuffle=True)

# üèóÔ∏è ResNet50 Model Setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.resnet50(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 2)  # Binary classification
model = model.to(device)

# üß™ Training Loop
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

for epoch in range(10):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f"Epoch {epoch+1} - Loss: {running_loss/len(train_loader):.4f}")

# üíæ Save Model
torch.save(model.state_dict(), "lung_model.pth")
print("‚úÖ Model saved as lung_model.pth")

# üîç Cancer Detection Function
def predict_lung_cancer(image_path):
    # Load saved model for inference
    model = models.resnet50(pretrained=False)
    model.fc = nn.Linear(model.fc.in_features, 2)
    model.load_state_dict(torch.load("lung_model.pth"))
    model.eval()
    model = model.to(device)

    # Preprocess input image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    img = np.stack([img]*3, axis=-1)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = transform_eval(img)
    img = img.unsqueeze(0).to(device)

    # Predict
    with torch.no_grad():
        outputs = model(img)
        _, pred = torch.max(outputs.data, 1)
        label = pred.item()

    # Return result
    return "‚ö†Ô∏è MALIGNANT ‚Äî Cancer Detected" if label == 1 else "‚úÖ BENIGN ‚Äî No Cancer"

# üß™ Run Prediction
result = predict_lung_cancer("img7.png")
print(result)
